// WARNING! Autogenerated by goremote, don't touch.

package main

import (
	"net/rpc"
)

type RPCRemote struct {
}

// wrapper for: Server_AutoComplete

type Args_AutoComplete struct {
	Arg0 []byte
	Arg1 string
	Arg2 int
}
type Reply_AutoComplete struct {
	Arg0, Arg1, Arg2 []string
	Arg3             int
}

func (r *RPCRemote) RPCServer_AutoComplete(args *Args_AutoComplete, reply *Reply_AutoComplete) error {
	reply.Arg0, reply.Arg1, reply.Arg2, reply.Arg3 = Server_AutoComplete(args.Arg0, args.Arg1, args.Arg2)
	return nil
}
func Client_AutoComplete(cli *rpc.Client, Arg0 []byte, Arg1 string, Arg2 int) (a, b, c []string, d int) {
	var args Args_AutoComplete
	var reply Reply_AutoComplete
	args.Arg0 = Arg0
	args.Arg1 = Arg1
	args.Arg2 = Arg2
	err := cli.Call("RPCRemote.RPCServer_AutoComplete", &args, &reply)
	if err != nil {
		panic(err)
	}
	return reply.Arg0, reply.Arg1, reply.Arg2, reply.Arg3
}

// wrapper for: Server_Close

type Args_Close struct {
	Arg0 int
}
type Reply_Close struct {
	Arg0 int
}

func (r *RPCRemote) RPCServer_Close(args *Args_Close, reply *Reply_Close) error {
	reply.Arg0 = Server_Close(args.Arg0)
	return nil
}
func Client_Close(cli *rpc.Client, Arg0 int) int {
	var args Args_Close
	var reply Reply_Close
	args.Arg0 = Arg0
	err := cli.Call("RPCRemote.RPCServer_Close", &args, &reply)
	if err != nil {
		panic(err)
	}
	return reply.Arg0
}

// wrapper for: Server_Status

type Args_Status struct {
	Arg0 int
}
type Reply_Status struct {
	Arg0 string
}

func (r *RPCRemote) RPCServer_Status(args *Args_Status, reply *Reply_Status) error {
	reply.Arg0 = Server_Status(args.Arg0)
	return nil
}
func Client_Status(cli *rpc.Client, Arg0 int) string {
	var args Args_Status
	var reply Reply_Status
	args.Arg0 = Arg0
	err := cli.Call("RPCRemote.RPCServer_Status", &args, &reply)
	if err != nil {
		panic(err)
	}
	return reply.Arg0
}

// wrapper for: Server_DropCache

type Args_DropCache struct {
	Arg0 int
}
type Reply_DropCache struct {
	Arg0 int
}

func (r *RPCRemote) RPCServer_DropCache(args *Args_DropCache, reply *Reply_DropCache) error {
	reply.Arg0 = Server_DropCache(args.Arg0)
	return nil
}
func Client_DropCache(cli *rpc.Client, Arg0 int) int {
	var args Args_DropCache
	var reply Reply_DropCache
	args.Arg0 = Arg0
	err := cli.Call("RPCRemote.RPCServer_DropCache", &args, &reply)
	if err != nil {
		panic(err)
	}
	return reply.Arg0
}

// wrapper for: Server_Set

type Args_Set struct {
	Arg0, Arg1 string
}
type Reply_Set struct {
	Arg0 string
}

func (r *RPCRemote) RPCServer_Set(args *Args_Set, reply *Reply_Set) error {
	reply.Arg0 = Server_Set(args.Arg0, args.Arg1)
	return nil
}
func Client_Set(cli *rpc.Client, Arg0, Arg1 string) string {
	var args Args_Set
	var reply Reply_Set
	args.Arg0 = Arg0
	args.Arg1 = Arg1
	err := cli.Call("RPCRemote.RPCServer_Set", &args, &reply)
	if err != nil {
		panic(err)
	}
	return reply.Arg0
}
